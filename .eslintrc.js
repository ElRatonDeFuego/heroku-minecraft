module.exports = {
  root: true,
  parser: "@typescript-eslint/parser",
  parserOptions: {
    tsconfigRootDir: __dirname,
    project: ["./tsconfig.json"],
  },
  plugins: [
    "@typescript-eslint",
    "deprecation",
    "header",
    "import",
    "jsdoc",
    "node",
    "no-null",
    "prefer-arrow",
  ],
  extends: [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    "plugin:import/recommended",
    "plugin:import/typescript",
    "plugin:jsdoc/recommended",
    "prettier",
  ],
  settings: {
    "import/resolver": {
      typescript: {},
    },
  },
  rules: {
    "@typescript-eslint/array-type": ["error", { default: "generic" }],
    "@typescript-eslint/await-thenable": "error",
    "@typescript-eslint/consistent-type-assertions": "error",
    "@typescript-eslint/consistent-type-definitions": ["error", "interface"],
    "@typescript-eslint/explicit-member-accessibility": "error",
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "@typescript-eslint/member-delimiter-style": "error",
    "@typescript-eslint/member-ordering": "error",
    "@typescript-eslint/method-signature-style": "error",
    "@typescript-eslint/naming-convention": [
      "error",
      {
        selector: ["default", "objectLiteralProperty", "variable"],
        format: ["camelCase", "PascalCase", "snake_case", "UPPER_CASE"],
        leadingUnderscore: "forbid",
        trailingUnderscore: "forbid",
      },

      {
        selector: ["classProperty", "parameter"],
        format: ["camelCase"],
      },

      {
        selector: ["classProperty", "parameter", "variable"],
        modifiers: ["unused"],
        format: ["camelCase"],
        leadingUnderscore: "require",
      },

      {
        selector: "function",
        format: ["camelCase", "PascalCase"],
      },

      {
        selector: "variable",
        modifiers: ["const", "global"],
        types: ["number", "string"],
        format: ["PascalCase", "UPPER_CASE"],
      },

      {
        selector: "variable",
        modifiers: ["const", "global"],
        types: ["boolean"],
        format: ["camelCase", "UPPER_CASE"],
        custom: {
          regex:
            "^(((is|are|was|were|do|does|has|have)[A-Z])|([A-Z]+(_[A-Z]+)*$))",
          match: true,
        },
      },

      {
        selector: "variable",
        modifiers: ["const", "global"],
        types: ["function"],
        format: ["camelCase", "PascalCase"],
      },

      {
        selector: "typeLike",
        format: ["PascalCase"],
        custom: {
          regex: "^I[A-Z]",
          match: false,
        },
      },
    ],
    "@typescript-eslint/no-confusing-void-expression": "error",
    "@typescript-eslint/no-dynamic-delete": "error",
    "@typescript-eslint/no-explicit-any": "error",
    "@typescript-eslint/no-extraneous-class": "error",
    "@typescript-eslint/no-floating-promises": "error",
    "@typescript-eslint/no-for-in-array": "error",
    "@typescript-eslint/no-non-null-assertion": "error",
    "@typescript-eslint/no-require-imports": "error",
    "@typescript-eslint/no-throw-literal": "error",
    "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
    "@typescript-eslint/no-unnecessary-qualifier": "error",
    "@typescript-eslint/no-unnecessary-type-arguments": "error",
    "@typescript-eslint/no-unnecessary-type-assertion": "error",
    "@typescript-eslint/no-unsafe-member-access": "error",
    "@typescript-eslint/no-unused-vars": [
      "error",
      { ignoreRestSiblings: true, varsIgnorePattern: "_.+" },
    ],
    "@typescript-eslint/prefer-for-of": "error",
    "@typescript-eslint/prefer-function-type": "error",
    "@typescript-eslint/prefer-nullish-coalescing": "error",
    "@typescript-eslint/prefer-optional-chain": "error",
    "@typescript-eslint/prefer-readonly": "error",
    "@typescript-eslint/promise-function-async": "error",
    "@typescript-eslint/require-await": "error",
    "@typescript-eslint/restrict-plus-operands": "error",
    "@typescript-eslint/strict-boolean-expressions": "error",
    "@typescript-eslint/unbound-method": "error",
    "@typescript-eslint/unified-signatures": "error",
    "arrow-body-style": "error",
    "arrow-parens": "error",
    "brace-style": ["error", "1tbs"],
    "class-methods-use-this": "error",
    complexity: "error",
    "constructor-super": "error",
    curly: ["error", "all"],
    "default-case": "error",
    "deprecation/deprecation": "error",
    "eol-last": ["error", "always"],
    eqeqeq: "error",
    "guard-for-in": "error",
    "header/header": "off",
    "import/no-default-export": "error",
    "import/no-unassigned-import": "error",
    "import/order": [
      "error",
      {
        alphabetize: { order: "asc", caseInsensitive: true },
        groups: [
          "builtin",
          "external",
          "internal",
          "parent",
          "sibling",
          "index",
          "type",
        ],
        warnOnUnassignedImports: true,
      },
    ],
    "jsdoc/no-types": "error",
    "jsdoc/require-jsdoc": "off",
    "max-classes-per-file": ["error", 1],
    "max-lines": ["error", 300],
    "new-parens": "error",
    "no-alert": "error",
    "no-bitwise": "error",
    "no-caller": "error",
    "no-cond-assign": ["error", "always"],
    "no-console": "off",
    "no-else-return": "error",
    "no-eval": "error",
    "no-extra-bind": "error",
    "no-fallthrough": "error",
    "no-invalid-this": "error",
    "no-irregular-whitespace": ["error", { skipStrings: false }],
    "no-multiple-empty-lines": ["error", { max: 1 }],
    "no-new-func": "error",
    "no-new-wrappers": "error",
    "no-null/no-null": "error",
    "no-param-reassign": "error",
    "no-plusplus": "error",
    "no-redeclare": "error",
    "no-restricted-globals": [
      "error",
      "_",
      "$",
      "escape",
      "event",
      "unescape",
      "uneval",
    ],
    "no-restricted-syntax": [
      "error",
      "BinaryExpression[operator='in']",
      "FunctionExpression",
      "WithStatement",
      {
        selector:
          "CallExpression[callee.name='setTimeout'][arguments.length!=2]",
        message: "setTimeout must always be invoked with two arguments.",
      },
    ],
    "no-return-await": "error",
    "no-sequences": ["error", { allowInParentheses: false }],
    "no-shadow": "error",
    "no-template-curly-in-string": "error",
    "no-trailing-spaces": "error",
    "no-undef-init": "error",
    "no-unused-expressions": "error",
    "no-unused-vars": "off", // see @typescript-eslint/no-unused-vars
    "no-useless-constructor": "error",
    "object-shorthand": "error",
    "one-var": ["error", "never"],
    "padding-line-between-statements": [
      "error",
      { blankLine: "always", prev: "*", next: "return" },
    ],
    "prefer-arrow/prefer-arrow-functions": "error",
    "prefer-object-spread": "error",
    "quote-props": ["error", "as-needed"],
    radix: "error",
    "spaced-comment": [
      "error",
      "always",
      { block: { balanced: true }, markers: ["!", "/"] },
    ],
    "sort-keys": ["error", "asc", { caseSensitive: false, natural: true }],
    yoda: ["error", "never"],
  },
};
